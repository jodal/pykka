[tool.poetry]
name = "pykka"
version = "4.0.1"
description = "Pykka is a Python implementation of the actor model"
authors = ["Stein Magnus Jodal <stein.magnus@jodal.no>"]
license = "Apache-2.0"
readme = "README.md"
homepage = "https://github.com/jodal/pykka"
repository = "https://github.com/jodal/pykka"
documentation = "https://pykka.readthedocs.io/"
keywords = ["actor", "concurrency", "threading"]
classifiers = [
   "Development Status :: 5 - Production/Stable",
   "Intended Audience :: Developers",
   "Topic :: Software Development :: Libraries",
]
include = ["docs", "examples", "tests"]

[tool.poetry.dependencies]
python = "^3.8.0"
typing-extensions = { version = "^4.0.0", python = "<3.10" }

[tool.poetry.group.black.dependencies]
black = "^23.9.1"

[tool.poetry.group.dev.dependencies]
tox = "^4.11.3"

[tool.poetry.group.docs.dependencies]
sphinx = "^6.2.1"
sphinx_rtd_theme = "^1.3.0"
toml = "^0.10.2"

[tool.poetry.group.mypy.dependencies]
mypy = "^1.5.1"

[tool.poetry.group.pyright.dependencies]
pyright = "^1.1.327"

[tool.poetry.group.ruff.dependencies]
ruff = "^0.0.290"

[tool.poetry.group.tests.dependencies]
pytest = "^7.4.2"
pytest-cov = "^4.1.0"
pytest-mock = "^3.11.1"

[tool.black]
target-version = ["py38", "py39", "py310", "py311", "py312"]

[tool.coverage.paths]
source = ["src"]

[tool.coverage.run]
branch = true
source = ["pykka"]

[tool.coverage.report]
exclude_lines = ["pragma: no cover", "if TYPE_CHECKING", '\.\.\.']

[tool.mypy]
disallow_untyped_defs = true
no_implicit_optional = true
strict_equality = true
warn_return_any = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_unused_configs = true

[tool.ruff]
select = [
   "A",   # flake8-builtins
   "ANN", # flake8-annotations
   "ARG", # flake8-unused-arguments
   "B",   # flake8-bugbear
   "C4",  # flake8-comprehensions
   "C90", # mccabe
   "D",   # pydocstyle
   "DTZ", # flake8-datetimez
   "E",   # pycodestyle
   "ERA", # eradicate
   "F",   # pyflakes
   "FBT", # flake8-boolean-trap
   "I",   # isort
   "INP", # flake8-no-pep420
   "ISC", # flake8-implicit-str-concat
   "N",   # pep8-naming
   "PGH", # pygrep-hooks
   "PIE", # flake8-pie
   "PLC", # pylint convention
   "PLE", # pylint error
   "PLR", # pylint refactor
   "PLW", # pylint warning
   "PT",  # flake8-pytest-style
   "PTH", # flake8-use-pathlib
   "Q",   # flake8-quotes
   "RET", # flake8-return
   "RSE", # flake8-raise
   "RUF", # ruff
   "SIM", # flake8-simplify
   "SLF", # flake8-self
   "T20", # flake8-print
   "TCH", # flake8-type-checking
   "TID", # flake8-tidy-imports
   "TRY", # tryceratops
   "UP",  # pyupgrade
   "W",   # pycodestyle
]
ignore = [
   "A003",    # builtin-attribute-shadowing
   "ANN101",  # missing-type-self
   "ANN102",  # missing-type-cls
   "ANN401",  # any-type
   "D203",    # one-blank-line-before-class
   "D213",    # multi-line-summary-second-line
   "PLR2004", # magic-value-comparison
   "RET504",  # unnecessary-assign
   "TRY003",  # raise-vanilla-args
   #
   # Equivalent to `pyupgrade --keep-runtime-typing`:
   "UP006", # deprecated-collection-type
   "UP007", # typing-union
]
target-version = "py38"

[tool.ruff.per-file-ignores]
"docs/*" = [
   "D",      # pydocstyle
   "INP001", # flake8-no-pep420
]
"examples/*" = [
   "ANN",    # flake8-annotations
   "D",      # pydocstyle
   "INP001", # flake8-no-pep420
   "T20",    # flake8-print
]
"tests/*" = [
   "ANN",    # flake8-annotations
   "ARG",    # flake8-unused-arguments
   "D",      # pydocstyle
   "TRY002", # raise-vanilla-class
]

[tool.ruff.isort]
known-first-party = ["pykka"]

[tool.pyright]
pythonVersion = "3.8"
venvPath = "."
venv = ".venv"
typeCheckingMode = "strict"
# Already coverd by tests and careful import ordering:
reportImportCycles = false
# Already covered by flake8-self:
reportPrivateUsage = false

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
