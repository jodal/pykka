[project]
name = "pykka"
version = "4.2.0"
description = "Pykka is a Python implementation of the actor model"
authors = [{ name = "Stein Magnus Jodal", email = "stein.magnus@jodal.no" }]
requires-python = ">=3.9"
readme = "README.md"
license = "Apache-2.0"
keywords = ["actor", "concurrency", "threading"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Libraries",
]
dependencies = ["typing-extensions>=4.0.0 ; python_version < '3.10'"]

[project.urls]
"Source code" = "https://github.com/jodal/pykka"
Documentation = "https://pykka.readthedocs.io/"


[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"


[dependency-groups]
dev = [
    "tox>=4.21.2",
    "tox-uv>=1.23.2",
    { include-group = "docs" },
    { include-group = "mypy" },
    { include-group = "pyright" },
    { include-group = "ruff" },
    { include-group = "tests" },
]
docs = ["sphinx>=6.2.1", "sphinx_rtd_theme>=1.3.0", "tomli>=2.0.1"]
mypy = ["mypy>=1.10.1"]
pyright = ["pyright>=1.1.394"]
ruff = ["ruff>=0.9.6"]
tests = ["pytest>=7.4.2", "pytest-cov>=4.1.0", "pytest-mock>=3.11.1"]


[tool.coverage.paths]
source = ["src/", "*/site-packages/"]

[tool.coverage.run]
branch = true
source_pkgs = ["pykka"]

[tool.coverage.report]
exclude_lines = ["pragma: no cover", "if TYPE_CHECKING", '\.\.\.']


[tool.mypy]
disallow_untyped_defs = true
no_implicit_optional = true
strict_equality = true
warn_return_any = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_unused_configs = true


[tool.pyright]
pythonVersion = "3.9"
typeCheckingMode = "strict"
# Already coverd by tests and careful import ordering:
reportImportCycles = false
# Already covered by flake8-self:
reportPrivateUsage = false


[tool.ruff]
target-version = "py39"

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "A003",    # builtin-attribute-shadowing
    "ANN401",  # any-type
    "D203",    # one-blank-line-before-class
    "D213",    # multi-line-summary-second-line
    "G004",    # logging-f-string
    "PLR2004", # magic-value-comparison
    "RET504",  # unnecessary-assign
    "S101",    # assert
    "TRY003",  # raise-vanilla-args
    "UP007",   # typing-union
    #
    # These rules interfere with `ruff format`
    "COM812", # missing-trailing-comma
    "ISC001", # single-line-implicit-string-concatenation
]

[tool.ruff.lint.per-file-ignores]
"docs/*" = [
    "D",      # pydocstyle
    "INP001", # implicit-namespace-package
]
"examples/*" = [
    "ANN",    # flake8-annotations
    "BLE001", # blind-except
    "D",      # pydocstyle
    "INP001", # implicit-namespace-package
    "T20",    # flake8-print
]
"tests/*" = [
    "ANN",    # flake8-annotations
    "ARG",    # flake8-unused-arguments
    "D",      # pydocstyle
    "EM101",  # raw-string-in-exception
    "TRY002", # raise-vanilla-class
]

[tool.ruff.lint.pyupgrade]
keep-runtime-typing = true


[tool.tox]
env_list = [
    "3.9",
    "3.10",
    "3.11",
    "3.12",
    "3.13",
    "3.14",
    "mypy",
    "pyright",
    "ruff-format",
    "ruff-lint",
    "docs",
]

[tool.tox.env_run_base]
package = "wheel"
wheel_build_env = ".pkg"
dependency_groups = ["tests"]
commands = [
    [
        "pytest",
        "--cov",
        "--basetemp={envtmpdir}",
        { replace = "posargs", extend = true },
    ],
]

[tool.tox.env.mypy]
dependency_groups = ["tests", "mypy"]
commands = [
    [
        "mypy",
        { replace = "posargs", default = [
            "src",
            "tests",
        ], extend = true },
    ],
]

[tool.tox.env.pyright]
dependency_groups = ["tests", "pyright"]
commands = [
    [
        "pyright",
        { replace = "posargs", default = [
            "src",
            "tests",
        ], extend = true },
    ],
]

[tool.tox.env.ruff-format]
skip_install = true
dependency_groups = ["ruff"]
commands = [["ruff", "format", "--check", "{posargs:.}"]]

[tool.tox.env.ruff-lint]
skip_install = true
dependency_groups = ["ruff"]
commands = [["ruff", "check", "{posargs:.}"]]

[tool.tox.env.docs]
dependency_groups = ["docs"]
commands = [["sphinx-build", "docs", "{envtmpdir}"]]
